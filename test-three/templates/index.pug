//- Use the presentation layout so we can keep this clean
extends layouts/presentation

//- Customize the title, meta description, and author using this block.
block append config
  -
    config.title = 'Coshx Slide Presentation';
    config.description = 'Slide framework by @hakimel. Ported to Pug by @jlengstorf. Modified by @gopalmetro @coshxlabs';
  -

//- Add your slides here. See templates/includes/_mixins.pug for information
//- on how `+slide` works.
block slides
    +slide
        h1  Ruby, Rails, & some puppet
        ul
            li Instructor: Ben Taitelbaum
            li Slides:
                a(href="https://coshx.com/talks") https://coshx.com/talks
            li Completed Labs:
                a(href=" https://github.com/btaitelb/ruby_rails_puppet_training") https://github.com/btaitelb/ruby_rails_puppet_training

    +slide
        h1 Course Flow
        .x-large
            ol
              li Ruby
                ol
                  li Build a game in Ruby
                  li Package the game as a gem
                  li Expose some logic via the server
              li Rails
                ol
                  li Configure & manage
                  li Graphical front-end
                  li Persistent Storage
            ol
              li Puppet
                ol
                  li Define game resources
                  li Read configurations from Rails 
                  | as facts 
                  li Demonstrate the Ruby we've learned
              li other stuff
                ol
                  li Advanced topics
                  li Team-specific
                  li Creative
    +slide
        h1 Philosophy
          h3 Principle of Least Surprise
            blockquote.quote I believe people want to express themselves when they program. They don’t want to fight with the language. Programming languages must feel natural to programmers. I tried to make people enjoy programming and concentrate on the fun and creative part of programming when they use Ruby.
              footer Yukihiro “Matz” Matsumoto, created ruby in 1993
        .footnote
            ul
                li 
                    a(href='http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html') http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html
    +slide
        h1 Duck Typing
        ul
            li “If it walks and talks like a duck…”
            li.fragment.fade-in Then it’s a duck!
            li.fragment.fade-in As long as an object has the methods we expect, we can ignore its type.
            li.fragment.fade-in Dynamic Typing: objects aren’t type checked until runtime
            li.fragment.fade-in Objects are strongly typed
            ul
                li.fragment.fade-in everything has a type and objects don’t change type
            li.fragment.fade-in Types aren’t checked unless code explicitly checks
    +slide
        h1 Comments
        pre.ruby
          code.code-line-wrap
                | # this is a ruby comment
                | ##
                | # We'll use #=> to represent the output of an expression,
                | # as if it were evaluated in the Interactive Ruby Shell (irb
                | ##
                |
                | 3/4.0
                | #=> 0.75
                |
                | =begin 
                | You might also come across this style for multi-line comments, but using # is more prevalent. 
                | =end
    +slide
        h1 Strings
        pre.ruby
            code.code-line-wrap
                | # single quotes are for literal strings
                | 'Hello'
                |
                | # double quotes allow special characters
                | # and variable interpolation
                | "pi is:\t\#{Math::PI}"
                |
                | # escaping quotes isn't fun, let ruby do that for us
                | %{That's a "quoted" string}
                | #=> "That's a \"quoted\" string"
                |
                | # we often need to trim whitespace off of a string
                | "hello \n".strip
                | #=> "hello"
    +slide
        h1 Strings
        pre.ruby
            code.code-line-wrap
                |$my_global_variable = "Try to avoid using global variables"
                |$my_global_variable = "whenever possible"
                |
                |MY_GLOBAL_CONSTANT = "I am a constant"
                |MY_GLOBAL_CONSTANT = "warning if you try to change me"
    +slide
        h1.labs Lab 02: Basic Types
        h2 Launch IRb (part 1/10)
        ol
            li 
                code ssh 
                | into the VM
            li Type <code>irb</code>
            li You should see a prompt like
            pre.ruby
                code
                    | 2.3.3 :001 >
            li Exit <code>irb</code> by typing <code>exit</code>, <code>quit</code>, or CTRL+d (End of File)
            li Launch <code>irb</code> again for the next several sections of this lab
