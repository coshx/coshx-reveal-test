//- Use the presentation layout so we can keep this clean
extends layouts/presentation

//- Customize the title, meta description, and author using this block.
block append config
  -
    config.title = 'Coshx Reveal+Pug Demo';
    config.description = 'Slide framework by @hakimel. Ported to Pug by @jlengstorf.';
    config.author.name = '@coshx';
    config.author.link = 'https://github.com/coshx';
    config.theme = 'coshx';
  -
//- Add your slides here. See templates/includes/_mixins.pug for information
//- on how `+slide` works.
block slides
    +slide&attributes(slideBackground)
        h1= config.title
        h5 This title slide uses config.title
        aside.notes This is a note
    +slide&attributes(slideBackground)
        h1 Setup pt. 1
        h5 'presentation.pug': Edit config settings
        pre
            code.code-line-wrap.nohighlight.large
                |    const config = {
                |      title: 'title goes here',
                |      description: 'description goes here',
                |      author: {
                |        name: 'author name goes here',
                |        email: 'author email goes here',
                |        link: 'author url goes here',
                |        twitter: 'author twitter goes here',
                |        github: 'author github goes here',
                |      },
                |      theme: 'theme name goes here', // name only, e.g. 'coshx', not 'coshx.css' or 'css/theme/coshx.css'
                |    };
                |  - var slideBackground = {'data-background-size': 'contain', 'data-background-image': '/images/coshx-background.png'}
        h5 Define slide width in the 
        pre
            code.code-line-wrap.nohighlight.large
                |// More info https://github.com/hakimel/reveal.js#configuration
                |Reveal.initialize({
                |  history: true,
                |  width: '100%',
                |  height: '100%',
    +slide&attributes(slideBackground)
        h1 Setup pt. 2
        h5 'index.pug': Overwrite Config settings in 'block append config'
        pre
            code.code-line-wrap.nohighlight.large
                |block append config
                |  -
                |    config.title = 'Coshx Reveal+Pug Demo';
                |    config.description = 'Slide framework by @hakimel. Ported to Pug by @jlengstorf.';
                |    config.author.name = '@coshx';
                |    config.author.link = 'https://github.com/coshx'
                |  -
    +slide&attributes(slideBackground)
        h1= config.title
        p= config.description
        p
            small.
                Demo created by #[a(href= config.author.link)= config.author.name]
        
    +slide&attributes(slideBackground)
        h1 Slide 1
        h5 'index.pug': Start building slides using the '+slide' mixin
        h6 '&attributes(slideBackground)' uses the slideBackground variable in 'presentation.pug' to set the background image
        pre
            code.code-line-wrap.nohighlight.large
                |+slide&attributes(slideBackground)
                |    h1= config.title
                |    p= config.description
                |    p
                |        small.
                |            Demo created by \#[a(href= config.author.link)= config.author.name]
    +slide&attributes(slideBackground)
        h1  Ruby, Rails, & some puppet
        ul
            li Instructor: Ben Taitelbaum
            li Slides:
                a(href="https://coshx.com/talks" target="_blank")  https://coshx.com/talks
            li Completed Labs:
                a(href="https://github.com/btaitelb/ruby_rails_puppet_training" target="_blank")  https://github.com/btaitelb/ruby_rails_puppet_training                
    +slide&attributes(slideBackground)
        h1 Slide 2 Code
        h5 Headers, Unordered Lists and Links
        pre
            code.code-line-wrap.nohighlight.large
                |h1  Ruby, Rails, & some puppet
                |ul
                |    li Instructor: Ben Taitelbaum
                |    li Slides:
                |        a(href="https://coshx.com/talks" target="_blank")  https://coshx.com/talks
                |    li Completed Labs:
                |        a(href= "https://github.com/btaitelb/ruby_rails_puppet_training" target="_blank") https://github.com/btaitelb/ruby_rails_puppet_training
                
    +slide&attributes(slideBackground)
        h1 Course Flow
        .x-large
            ol
              li Ruby
                ol
                  li Build a game in Ruby
                  li Package the game as a gem
                  li Expose some logic via the server
              li Rails
                ol
                  li Configure & manage
                  li Graphical front-end
                  li Persistent Storage
            ol
              li Puppet
                ol
                  li Define game resources
                  li Read configurations from Rails 
                  | as facts 
                  li Demonstrate the Ruby we've learned
              li other stuff
                ol
                  li Advanced topics
                  li Team-specific
                  li Creative
    +slide&attributes(slideBackground)
        h1 Slide 3.0 Code
        h5 Two Column Ordered List: Column 1
        pre
            code.code-line-wrap.nohighlight.large
                |+slide&attributes(slideBackground)
                |    h1 Course Flow
                |    .x-large
                |        ol
                |          li Ruby
                |            ol
                |              li Build a game in Ruby
                |              li Package the game as a gem
                |              li Expose some logic via the server
                |          li Rails
                |            ol
                |              li Configure & manage
                |              li Graphical front-end
                |              li Persistent Storage
    +slide&attributes(slideBackground)
        h1 Slide 3.1 Code
        h5 Two Column Ordered List: Column 2
        pre
            code.code-line-wrap.nohighlight.large            
                |ol
                |               li Puppet
                |                 ol
                |                   li Define game resources
                |                   li Read configurations from Rails 
                |                   |  as facts
                |                   li Demonstrate the Ruby we've learned
                |               li other stuff
                |                 ol
                |                   li Advanced topics
                |                   li Team-specific
                |                   li Creative                
    +slide&attributes(slideBackground)
        h1 Philosophy
          h3 Principle of Least Surprise
            blockquote.quote I believe people want to express themselves when they program. They don’t want to fight with the language. Programming languages must feel natural to programmers. I tried to make people enjoy programming and concentrate on the fun and creative part of programming when they use Ruby.
              footer Yukihiro “Matz” Matsumoto, created ruby in 1993
        .footnote
            ul
                li 
                    a(href='http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html' target="_blank") http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html
    +slide&attributes(slideBackground)
        h1 Slide 4 Code
        h5 Blockquotes with Attribution
        pre
            code.code-line-wrap.nohighlight.large
                |+slide&attributes(slideBackground)
                |    h1 Philosophy
                |      h3 Principle of Least Surprise
                |        blockquote.quote I believe people want to express themselves when they program. They don’t want to fight with the language. Programming languages must feel natural to programmers. I tried to make people enjoy programming and concentrate on the fun and creative part of programming when they use Ruby.
                |          footer Yukihiro “Matz” Matsumoto, created ruby in 1993
                |        .footnote
                |            ul
                |                li
                |                   a(href='http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html' target="_blank")} 
                |                   http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html}
    +slide&attributes(slideBackground)
        h1 Duck Typing
        ul.fragment.fade-in
            li.fragment.fade-out “If it walks and talks like a duck, then…”
            li.fragment.highlight-red It’s a duck!
            li.fragment.fade-in As long as an object has the methods we expect, we can ignore its type.
            li.fragment.fade-down Dynamic Typing: objects aren’t type checked until runtime
            li.fragment.fade-up Objects are strongly typed
                ul.fragment.fade-in
                    li.fragment.shrink everything has a type and objects don’t change type
                    li.fragment.grow Types aren’t checked unless code explicitly checks
    +slide&attributes(slideBackground)
        h1 Slide 5 Code
        h5 Animated Lists
        pre
            code.code-line-wrap.nohighlight.large
                |+slide&attributes(slideBackground)
                |    h1 Duck Typing
                |    ul.fragment.fade-in
                |        li.fragment.fade-out “If it walks and talks like a duck…”
                |        li.fragment.highlight-red Then it’s a duck!
                |        li.fragment.fade-in As long as an object has the methods we expect, we can ignore its type.
                |        li.fragment.fade-down Dynamic Typing: objects aren’t type checked until runtime
                |        li.fragment.fade-up Objects are strongly typed
                |           ul.fragment.fade-in
                |               li.fragment.shrink everything has a type and objects don’t change type
                |               li.fragment.grow Types aren’t checked unless code explicitly checks
    +slide&attributes(slideBackground)
        h1 Comments
        pre.ruby
          code.code-line-wrap
                | # this is a ruby comment
                | ##
                | # We'll use #=> to represent the output of an expression,
                | # as if it were evaluated in the Interactive Ruby Shell (irb
                | ##
                |
                | 3/4.0
                | #=> 0.75
                |
                | =begin 
                | You might also come across this style for multi-line comments, but using # is more prevalent. 
                | =end
    +slide&attributes(slideBackground)
        h1 Slide 6 Code
        h5 Ruby Syntax Highilighting #1: Comments
        pre
            code.code-line-wrap.nohighlight.large
                |+slide&attributes(slideBackground)
                |    h1 Comments
                |    pre.ruby
                |      code.code-line-wrap
                |            | # this is a ruby comment
                |            | ##
                |            | # We'll use #=> to represent the output of an expression,
                |            | # as if it were evaluated in the Interactive Ruby Shell (irb
                |            | ##
                |            |
                |            | 3/4.0
                |            | #=> 0.75
                |            |
                |            | =begin 
                |            | You might also come across this style for multi-line comments, but using # is more prevalent. 
                |            | =end
    +slide&attributes(slideBackground)
        h1 Strings
        pre.ruby
            code.code-line-wrap
                | # single quotes are for literal strings
                | 'Hello'
                |
                | # double quotes allow special characters
                | # and variable interpolation
                | "pi is:\t\#{Math::PI}"
                |
                | # escaping quotes isn't fun, let ruby do that for us
                | %{That's a "quoted" string}
                | #=> "That's a \"quoted\" string"
                |
                | # we often need to trim whitespace off of a string
                | "hello \n".strip
                | #=> "hello"
    +slide&attributes(slideBackground)
        h1 Slide 7 Code
        h5 Ruby Syntax Highilighting #2: Strings
        pre
            code.code-line-wrap.nohighlight.large
                |+slide&attributes(slideBackground)
                |    h1 Strings
                |    pre.ruby
                |        code.code-line-wrap
                |            | # single quotes are for literal strings
                |            | 'Hello'
                |            |
                |            | # double quotes allow special characters
                |            | # and variable interpolation
                |            | "pi is:\t\#{Math::PI}"
                |            |
                |            | # escaping quotes isn't fun, let ruby do that for us
                |            | %{That's a "quoted" string}
                |            | #=> "That's a \"quoted\" string"
                |            |
                |            | # we often need to trim whitespace off of a string
                |            | "hello \n".strip
                |            | #=> "hello"
    +slide&attributes(slideBackground)
        h1 Strings
        pre.ruby
            code.code-line-wrap
                |$my_global_variable = "Try to avoid using global variables"
                |$my_global_variable = "whenever possible"
                |
                |MY_GLOBAL_CONSTANT = "I am a constant"
                |MY_GLOBAL_CONSTANT = "warning if you try to change me"
    +slide&attributes(slideBackground)
        h1 Slide 8 Code
        h5 Ruby Syntax Highilighting #3
        pre
            code.code-line-wrap.nohighlight.large
                |+slide&attributes(slideBackground)
                |    h1 Strings
                |    pre.ruby
                |        code.code-line-wrap
                |            |$my_global_variable = "Try to avoid using global variables"
                |            |$my_global_variable = "whenever possible"
                |            |
                |            |MY_GLOBAL_CONSTANT = "I am a constant"
                |            |MY_GLOBAL_CONSTANT = "warning if you try to change me"
    +slide&attributes(slideBackground)
        h1.labs Lab 02: Basic Types
        h2 Launch IRb (part 1/10)
        ol
            li 
                code ssh 
                | into the VM
            li Type <code>irb</code>
            li You should see a prompt like
            pre.ruby
                code
                    | 2.3.3 :001 >
            li Exit <code>irb</code> by typing <code>exit</code>, <code>quit</code>, or CTRL+d (End of File)
            li Launch <code>irb</code> again for the next several sections of this lab
    +slide&attributes(slideBackground)
        h1 Slide 9 Code
        h5 Ruby Global Variables and Constants
        pre
            code.code-line-wrap.nohighlight.large
                |+slide&attributes(slideBackground)
                |    h1.labs Lab 02: Basic Types
                |    h2 Launch IRb (part 1/10)
                |    ol
                |        li 
                |            code ssh 
                |            | into the VM
                |        li Type <code>irb</code>
                |        li You should see a prompt like
                |        pre.ruby
                |            code
                |                | 2.3.3 :001 >
                |        li Exit <code>irb</code> by typing <code>exit</code>, <code>quit</code>, or CTRL+d (End of File)
                |        li Launch <code>irb</code> again for the next several sections of this lab
    +slide&attributes(slideBackground)
        h1 Slide 10
        h5 Speaker notes
        div.smaller
            ul
                li.fragment.fade-in  Press "s" to view speaker notes in a new window
                li.fragment.fade-in  Server-side speaker notes for viewing on your mobile device
                li.fragment.fade-in  Three different timers
                    ul.smaller
                        li.fragment.fade-in  Current wall-clock time
                        li.fragment.fade-in  Time elapsed since the beginning of the presentation
                        li.fragment.fade-in  (Optional) Pacing timer that shows red if behind time, green if on time and blue if ahead of time
    +slide&attributes(slideBackground)
        h1 Slide 11
        h5 General Notes about Reveal.js + Pug
        div.smaller
            ul
                li.fragment.fade-in  New slide with '+slide'
                li.fragment.fade-in  +slide(attribute1='value1' attribute2='value2')
                li.fragment.fade-in  +slide&attributes(slideBackground)
                li.fragment.fade-in  Whitespace sensitive.
                li.fragment.fade-in  h1.classname
                li.fragment.fade-in  h1#idname
                li.fragment.fade-in  divs do not need to be named
                    ul
                        li.fragment.fade-in  #id is equivalent to div#id
                li.fragment.fade-in  a(href='link') on it's own indented line - 
                    a(href='https://google.com') A link
                pre.fragment.fade-in
                    code.code-line-wrap.nohighlight.large
                        | li.fragment.fade-in a(href='link') on it's own indented line
                        |     a(href='https://google.com') A link
    +slide&attributes(slideBackground)
        h1 Slide 12
        h5 Other Things You Can Do With Reveal.js
        div.smaller
            ul
                li.fragment.fade-in Easily adjustable slide sizes
                li.fragment.fade-in Automatic scaling for different devices
                li.fragment.fade-in Auto-sliding for timed presentations
                li.fragment.fade-in Touch Navigation on touch sensitive devices
                li.fragment.fade-in Lazy loading for large presentations
                li.fragment.fade-in Custom Print and Print to PDF stylesheets
                li.fragment.fade-in Color, Image, Video, iFrame and Parallax backgrounds with Background Transitions
                li.fragment.fade-in Cross-Slide Linking
    +slide&attributes(slideBackground)
        h1 Slide 13
        h5 Other Things You Can Do With Reveal.js (cont.)
        div.smaller
            ul
                li.fragment.fade-in Fragments for manipulating individual elements in a slide
                li.fragment.fade-in Overview Mode for quickly scanning all slideshow
                li.fragment.fade-in Custom Themes
                li.fragment.fade-in Lots more at 
                    a(href='https://pugjs.org/') https://pugjs.org/
                li.fragment.fade-in And 
                    a(href='https://github.com/hakimel/reveal.js/') https://github.com/hakimel/reveal.js/
